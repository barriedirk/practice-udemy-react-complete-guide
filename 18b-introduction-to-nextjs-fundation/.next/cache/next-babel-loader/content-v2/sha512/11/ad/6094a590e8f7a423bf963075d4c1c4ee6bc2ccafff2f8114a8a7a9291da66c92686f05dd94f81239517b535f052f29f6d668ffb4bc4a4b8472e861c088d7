{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n// our-domain.com/\nimport Head from \"next/head\";\nimport { Fragment } from \"react\"; // note: nextjs will detect that MongoClient is only use insie of getStaticProps\n//       and will not include to the client bundle\n\nimport { MongoClient } from \"mongodb\"; // import { useEffect, useState } from \"react\";\n// we move Layout to router component _app.js to get every component will wrapper with Layout\n// import Layout from \"../components/layout/Layout\";\n\nimport MeetupList from \"../components/meetups/MeetupList\"; // const DUMMY_MEETUPS = [\n//     {\n//         id: \"m1\",\n//         title: \"A First Meeting\",\n//         image: \"https://picsum.photos/seed/picsum/200/300?random=1\",\n//         address: \"Some address 6, 1234 Some City\",\n//         description: \"This is a first meetup!\",\n//     },\n//     {\n//         id: \"m2\",\n//         title: \"A Second Meeting\",\n//         image: \"https://picsum.photos/seed/picsum/200/300?random=3\",\n//         address: \"Some address 1, 1234 Some City\",\n//         description: \"This is a second meetup!\",\n//     },\n// ];\n// note\n//   with useEffect the rendering of this page will occur twice\n//   with data empty and second with the data\n//   for SEO is a bad idea and for that reason we could use\n//   the function getStaticProps()\n//\n// function HomePage() {\n//     const [loaded, setLoadedMeetups] = useState([]);\n//     useEffect(() => {\n//         // send a http request and fetch data\n//         //\n//\n//         setLoadedMeetups(DUMMY_MEETUPS);\n//     }, []);\n//\n//     // return (\n//     //     <Layout>\n//     //         <MeetupList meetups={DUMMY_MEETUPS} />\n//     //     </Layout>\n//     // );\n//\n//     // return <MeetupList meetups={DUMMY_MEETUPS} />;\n//\n//     console.log(\"[ loaded ] ::: \", loaded);\n//\n//     return <MeetupList meetups={loaded} />;\n// }\n\nfunction HomePage(props) {\n  return /*#__PURE__*/_jsxs(Fragment, {\n    children: [/*#__PURE__*/_jsxs(Head, {\n      children: [/*#__PURE__*/_jsx(\"title\", {\n        children: \"React Meetups\"\n      }), /*#__PURE__*/_jsx(\"meta\", {\n        name: \"description\",\n        content: \"Browse a huge list of highly active React meetups!\"\n      })]\n    }), /*#__PURE__*/_jsx(MeetupList, {\n      meetups: props.meetups\n    }), \";\"]\n  });\n} // Data fetching for static pages (SSG)\n// -----------------------------------------\n//  The code inside of getStaticProps is not expose to the client\n//\n// Note: for static page generation\n//    nextjs will search for a function with this name during rendering process\n//    build on the server\n//\n//\n// export async function getStaticProps() {\n//     // can use any instruction only run on the server\n//     // fetch data from an API\n//\n//     // need to return always a object\n//     return {\n//         props: {\n//             meetups: DUMMY_MEETUPS,\n//         },\n//     };\n// }\n//\n\n\nexport async function getStaticProps() {\n  // fetch data from API\n  // Note: the code will not expose to the client\n  const client = await MongoClient.connect(\"mongodb+srv://practices:123ABCpractices@practices.socyj.mongodb.net/meetups?retryWrites=true&w=majority\");\n  const db = client.db();\n  const meetupsCollection = db.collection(\"meetups\");\n  const meetups = await meetupsCollection.find().toArray();\n  client.close(); // return {\n  //     props: {\n  //         meetups: DUMMY_MEETUPS,\n  //     },\n  //     // seconds that next will wait to regenerate the page\n  //     // on the server\n  //     revalidate: 10,\n  // };\n\n  return {\n    props: {\n      // we need to use map because mongodb use _id as an object, and throw and erro\n      meetups: meetups.map(meetup => ({\n        title: meetup.title,\n        address: meetup.address,\n        image: meetup.image,\n        description: meetup.description,\n        id: meetup._id.toString()\n      }))\n    },\n    revalidate: 1\n  };\n} // Data fetching for server (SSR)\n// -----------------------------------------\n//\n// NOTE: not run during the build process\n// run on the server, never on the client\n// for any incoming request\n//\n// export async function getServerSideProps(context) {\n//     // to check cookie, authentication, etc\n//     const req = context.req;\n//     const res = context.res;\n//     // fetch data from an API or filesystem\n//     return {\n//         props: {\n//             meetups: DUMMY_MEETUPS,\n//         },\n//     };\n// }\n\nexport default HomePage;","map":null,"metadata":{},"sourceType":"module"}