{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\practices\\\\react-complete-guide\\\\18b-introduction-to-nextjs\\\\pages\\\\[meetupId]\\\\index.js\";\nimport { Fragment } from \"react\";\nimport Head from \"next/head\";\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\n\nfunction MeetupDetails(props) {\n  console.log(\"[ props. ] ::: \", props);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: [/*#__PURE__*/_jsxDEV(\"title\", {\n        children: \"React\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"meta\", {\n        name: \"description\",\n        content: \"description\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(MeetupDetail, {\n      image: props.meeetupData.image,\n      title: props.meeetupData.title,\n      address: props.meeetupData.address,\n      description: props.meeetupData.description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 9\n  }, this);\n} // // in this example:\n// // http://localhost:3000/m3 return a 404 page\n// //\n// export async function getStaticPaths() {\n//     return {\n//         // indicate if support all support of params or not\n//         fallback: false,\n//         paths: [\n//             {\n//                 params: {\n//                     meetupId: \"m1\",\n//                 },\n//             },\n//             {\n//                 params: {\n//                     meetupId: \"m2\",\n//                 },\n//             },\n//         ],\n//     };\n// }\n//\n//\n// // this run in the build time\n// export async function getStaticProps(context) {\n//     // NOTE:\n//     // we can't use react routes like useRouter\n//     // we use the context\n//\n//     const meetupId = context.params.meetupId;\n//\n//     // Note:\n//     // doesn't show in the console browser\n//     // show up in the terminal\n//     console.log(\"[ context.params ] ::: \", context.params);\n//     console.log(\"[ meetupId ] ::: \", meetupId);\n//\n//     // Server Error\n//     // Error: getStaticPaths is required for dynamic SSG pages and is missing for '/[meetupId]'.\n//     // Read more: https://err.sh/next.js/invalid-getstaticpaths-value\n//     //\n//     // the above error is because this page is a dynamic page and need\n//     // getStaticPaths function\n//     // to generate for any kind of id ( meetupId )\n//\n//     return {\n//         props: {\n//             meeetupData: {\n//                 id: \"m1\",\n//                 image: \"https://picsum.photos/seed/picsum/200/300?random=1\",\n//                 title: \"title\",\n//                 address: \"address\",\n//                 description: \"description\",\n//             },\n//         },\n//     };\n// }\n\n\n_c = MeetupDetails;\nexport var __N_SSG = true;\nexport default MeetupDetails;\n\nvar _c;\n\n$RefreshReg$(_c, \"MeetupDetails\");","map":{"version":3,"sources":["D:/practices/react-complete-guide/18b-introduction-to-nextjs/pages/[meetupId]/index.js"],"names":["Fragment","Head","MeetupDetail","MeetupDetails","props","console","log","meeetupData","image","title","address","description"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AAIA,OAAOC,YAAP,MAAyB,uCAAzB;;AAEA,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAC1BC,EAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BF,KAA/B;AAEA,sBACI,QAAC,QAAD;AAAA,4BACI,QAAC,IAAD;AAAA,8BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAM,QAAA,IAAI,EAAC,aAAX;AAAyB,QAAA,OAAO,EAAC;AAAjC;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAKI,QAAC,YAAD;AACI,MAAA,KAAK,EAAEA,KAAK,CAACG,WAAN,CAAkBC,KAD7B;AAEI,MAAA,KAAK,EAAEJ,KAAK,CAACG,WAAN,CAAkBE,KAF7B;AAGI,MAAA,OAAO,EAAEL,KAAK,CAACG,WAAN,CAAkBG,OAH/B;AAII,MAAA,WAAW,EAAEN,KAAK,CAACG,WAAN,CAAkBI;AAJnC;AAAA;AAAA;AAAA;AAAA,YALJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAcH,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;KA3ESR,a;;AA4HT,eAAeA,aAAf","sourcesContent":["import { Fragment } from \"react\";\r\nimport Head from \"next/head\";\r\n\r\nimport { MongoClient, ObjectId } from \"mongodb\";\r\n\r\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\r\n\r\nfunction MeetupDetails(props) {\r\n    console.log(\"[ props. ] ::: \", props);\r\n\r\n    return (\r\n        <Fragment>\r\n            <Head>\r\n                <title>React</title>\r\n                <meta name=\"description\" content=\"description\" />\r\n            </Head>\r\n            <MeetupDetail\r\n                image={props.meeetupData.image}\r\n                title={props.meeetupData.title}\r\n                address={props.meeetupData.address}\r\n                description={props.meeetupData.description}\r\n            />\r\n        </Fragment>\r\n    );\r\n}\r\n\r\n// // in this example:\r\n// // http://localhost:3000/m3 return a 404 page\r\n// //\r\n// export async function getStaticPaths() {\r\n//     return {\r\n//         // indicate if support all support of params or not\r\n//         fallback: false,\r\n//         paths: [\r\n//             {\r\n//                 params: {\r\n//                     meetupId: \"m1\",\r\n//                 },\r\n//             },\r\n//             {\r\n//                 params: {\r\n//                     meetupId: \"m2\",\r\n//                 },\r\n//             },\r\n//         ],\r\n//     };\r\n// }\r\n//\r\n//\r\n// // this run in the build time\r\n// export async function getStaticProps(context) {\r\n//     // NOTE:\r\n//     // we can't use react routes like useRouter\r\n//     // we use the context\r\n//\r\n//     const meetupId = context.params.meetupId;\r\n//\r\n//     // Note:\r\n//     // doesn't show in the console browser\r\n//     // show up in the terminal\r\n//     console.log(\"[ context.params ] ::: \", context.params);\r\n//     console.log(\"[ meetupId ] ::: \", meetupId);\r\n//\r\n//     // Server Error\r\n//     // Error: getStaticPaths is required for dynamic SSG pages and is missing for '/[meetupId]'.\r\n//     // Read more: https://err.sh/next.js/invalid-getstaticpaths-value\r\n//     //\r\n//     // the above error is because this page is a dynamic page and need\r\n//     // getStaticPaths function\r\n//     // to generate for any kind of id ( meetupId )\r\n//\r\n//     return {\r\n//         props: {\r\n//             meeetupData: {\r\n//                 id: \"m1\",\r\n//                 image: \"https://picsum.photos/seed/picsum/200/300?random=1\",\r\n//                 title: \"title\",\r\n//                 address: \"address\",\r\n//                 description: \"description\",\r\n//             },\r\n//         },\r\n//     };\r\n// }\r\n\r\nexport async function getStaticPaths() {\r\n    const client = await MongoClient.connect(\r\n        \"mongodb+srv://practices:123ABCpractices@practices.socyj.mongodb.net/meetups?retryWrites=true&w=majority\"\r\n    );\r\n    const db = client.db();\r\n    const meetupsCollection = db.collection(\"meetups\");\r\n\r\n    const meetups = await meetupsCollection.find({}, { _id: 1 }).toArray();\r\n\r\n    client.close();\r\n\r\n    return {\r\n        fallback: false,\r\n        paths: meetups.map((meetup) => ({\r\n            params: { meetupId: meetup._id.toString() },\r\n        })),\r\n    };\r\n}\r\n\r\nexport async function getStaticProps(context) {\r\n    const meetupId = context.params.meetupId;\r\n\r\n    const client = await MongoClient.connect(\r\n        \"mongodb+srv://practices:123ABCpractices@practices.socyj.mongodb.net/meetups?retryWrites=true&w=majority\"\r\n    );\r\n    const db = client.db();\r\n    const meetupsCollection = db.collection(\"meetups\");\r\n\r\n    const selectedMeetup = await meetupsCollection.findOne({\r\n        _id: ObjectId(meetupId),\r\n    });\r\n\r\n    console.log(\"[ selectedMeetup ] ::: \", selectedMeetup);\r\n    client.close();\r\n\r\n    return {\r\n        props: {\r\n            meeetupData: {\r\n                id: selectedMeetup._id.toString(),\r\n                title: selectedMeetup.title,\r\n                image: selectedMeetup.image,\r\n                description: selectedMeetup.description,\r\n            },\r\n        },\r\n    };\r\n}\r\n\r\nexport default MeetupDetails;\r\n"]},"metadata":{},"sourceType":"module"}