{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\practices\\\\react-complete-guide\\\\18b-introduction-to-nextjs\\\\pages\\\\index.js\";\n// our-domain.com/\nimport Head from \"next/head\";\nimport { Fragment } from \"react\"; // note: nextjs will detect that MongoClient is only use insie of getStaticProps\n//       and will not include to the client bundle\n\nimport { MongoClient } from \"mongodb\"; // import { useEffect, useState } from \"react\";\n// we move Layout to router component _app.js to get every component will wrapper with Layout\n// import Layout from \"../components/layout/Layout\";\n\nimport MeetupList from \"../components/meetups/MeetupList\"; // const DUMMY_MEETUPS = [\n//     {\n//         id: \"m1\",\n//         title: \"A First Meeting\",\n//         image: \"https://picsum.photos/seed/picsum/200/300?random=1\",\n//         address: \"Some address 6, 1234 Some City\",\n//         description: \"This is a first meetup!\",\n//     },\n//     {\n//         id: \"m2\",\n//         title: \"A Second Meeting\",\n//         image: \"https://picsum.photos/seed/picsum/200/300?random=3\",\n//         address: \"Some address 1, 1234 Some City\",\n//         description: \"This is a second meetup!\",\n//     },\n// ];\n// note\n//   with useEffect the rendering of this page will occur twice\n//   with data empty and second with the data\n//   for SEO is a bad idea and for that reason we could use\n//   the function getStaticProps()\n//\n// function HomePage() {\n//     const [loaded, setLoadedMeetups] = useState([]);\n//     useEffect(() => {\n//         // send a http request and fetch data\n//         //\n//\n//         setLoadedMeetups(DUMMY_MEETUPS);\n//     }, []);\n//\n//     // return (\n//     //     <Layout>\n//     //         <MeetupList meetups={DUMMY_MEETUPS} />\n//     //     </Layout>\n//     // );\n//\n//     // return <MeetupList meetups={DUMMY_MEETUPS} />;\n//\n//     console.log(\"[ loaded ] ::: \", loaded);\n//\n//     return <MeetupList meetups={loaded} />;\n// }\n\nfunction HomePage(props) {\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: /*#__PURE__*/_jsxDEV(\"title\", {\n        children: \"React Meetups\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(MeetupList, {\n      meetups: props.meetups\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this), \";\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 9\n  }, this);\n} // Data fetching for static pages (SSG)\n// -----------------------------------------\n//  The code inside of getStaticProps is not expose to the client\n//\n// Note: for static page generation\n//    nextjs will search for a function with this name during rendering process\n//    build on the server\n//\n//\n// export async function getStaticProps() {\n//     // can use any instruction only run on the server\n//     // fetch data from an API\n//\n//     // need to return always a object\n//     return {\n//         props: {\n//             meetups: DUMMY_MEETUPS,\n//         },\n//     };\n// }\n//\n\n\nexport async function getStaticProps() {\n  // fetch data from API\n  // Note: the code will not expose to the client\n  const client = await MongoClient.connect(\"mongodb+srv://practices:123ABCpractices@practices.socyj.mongodb.net/meetups?retryWrites=true&w=majority\");\n  const db = client.db();\n  const meetupsCollection = db.collection(\"meetups\");\n  const meetups = await meetupsCollection.find().toArray();\n  client.close(); // return {\n  //     props: {\n  //         meetups: DUMMY_MEETUPS,\n  //     },\n  //     // seconds that next will wait to regenerate the page\n  //     // on the server\n  //     revalidate: 10,\n  // };\n\n  return {\n    props: {\n      // we need to use map because mongodb use _id as an object, and throw and erro\n      meetups: meetups.map(meetup => ({\n        title: meetup.title,\n        address: meetup.address,\n        image: meetup.image,\n        description: meetup.description,\n        id: meetup._id.toString()\n      }))\n    },\n    revalidate: 1\n  };\n} // Data fetching for server (SSR)\n// -----------------------------------------\n//\n// NOTE: not run during the build process\n// run on the server, never on the client\n// for any incoming request\n//\n// export async function getServerSideProps(context) {\n//     // to check cookie, authentication, etc\n//     const req = context.req;\n//     const res = context.res;\n//     // fetch data from an API or filesystem\n//     return {\n//         props: {\n//             meetups: DUMMY_MEETUPS,\n//         },\n//     };\n// }\n\nexport default HomePage;","map":{"version":3,"sources":["D:/practices/react-complete-guide/18b-introduction-to-nextjs/pages/index.js"],"names":["Head","Fragment","MongoClient","MeetupList","HomePage","props","meetups","getStaticProps","client","connect","db","meetupsCollection","collection","find","toArray","close","map","meetup","title","address","image","description","id","_id","toString","revalidate"],"mappings":";;AAAA;AACA,OAAOA,IAAP,MAAiB,WAAjB;AACA,SAASC,QAAT,QAAyB,OAAzB,C,CAEA;AACA;;AACA,SAASC,WAAT,QAA4B,SAA5B,C,CAEA;AAEA;AACA;;AACA,OAAOC,UAAP,MAAuB,kCAAvB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AACrB,sBACI,QAAC,QAAD;AAAA,4BACI,QAAC,IAAD;AAAA,6BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ,eAII,QAAC,UAAD;AAAY,MAAA,OAAO,EAAEA,KAAK,CAACC;AAA3B;AAAA;AAAA;AAAA;AAAA,YAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAQH,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,OAAO,eAAeC,cAAf,GAAgC;AACnC;AAEA;AACA,QAAMC,MAAM,GAAG,MAAMN,WAAW,CAACO,OAAZ,CACjB,yGADiB,CAArB;AAGA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AACA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AAEA,QAAMN,OAAO,GAAG,MAAMK,iBAAiB,CAACE,IAAlB,GAAyBC,OAAzB,EAAtB;AAEAN,EAAAA,MAAM,CAACO,KAAP,GAZmC,CAcnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAAO;AACHV,IAAAA,KAAK,EAAE;AACH;AACAC,MAAAA,OAAO,EAAEA,OAAO,CAACU,GAAR,CAAaC,MAAD,KAAa;AAC9BC,QAAAA,KAAK,EAAED,MAAM,CAACC,KADgB;AAE9BC,QAAAA,OAAO,EAAEF,MAAM,CAACE,OAFc;AAG9BC,QAAAA,KAAK,EAAEH,MAAM,CAACG,KAHgB;AAI9BC,QAAAA,WAAW,EAAEJ,MAAM,CAACI,WAJU;AAK9BC,QAAAA,EAAE,EAAEL,MAAM,CAACM,GAAP,CAAWC,QAAX;AAL0B,OAAb,CAAZ;AAFN,KADJ;AAWHC,IAAAA,UAAU,EAAE;AAXT,GAAP;AAaH,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAerB,QAAf","sourcesContent":["// our-domain.com/\r\nimport Head from \"next/head\";\r\nimport { Fragment } from \"react\";\r\n\r\n// note: nextjs will detect that MongoClient is only use insie of getStaticProps\r\n//       and will not include to the client bundle\r\nimport { MongoClient } from \"mongodb\";\r\n\r\n// import { useEffect, useState } from \"react\";\r\n\r\n// we move Layout to router component _app.js to get every component will wrapper with Layout\r\n// import Layout from \"../components/layout/Layout\";\r\nimport MeetupList from \"../components/meetups/MeetupList\";\r\n\r\n// const DUMMY_MEETUPS = [\r\n//     {\r\n//         id: \"m1\",\r\n//         title: \"A First Meeting\",\r\n//         image: \"https://picsum.photos/seed/picsum/200/300?random=1\",\r\n//         address: \"Some address 6, 1234 Some City\",\r\n//         description: \"This is a first meetup!\",\r\n//     },\r\n//     {\r\n//         id: \"m2\",\r\n//         title: \"A Second Meeting\",\r\n//         image: \"https://picsum.photos/seed/picsum/200/300?random=3\",\r\n//         address: \"Some address 1, 1234 Some City\",\r\n//         description: \"This is a second meetup!\",\r\n//     },\r\n// ];\r\n\r\n// note\r\n//   with useEffect the rendering of this page will occur twice\r\n//   with data empty and second with the data\r\n//   for SEO is a bad idea and for that reason we could use\r\n//   the function getStaticProps()\r\n//\r\n// function HomePage() {\r\n//     const [loaded, setLoadedMeetups] = useState([]);\r\n//     useEffect(() => {\r\n//         // send a http request and fetch data\r\n//         //\r\n//\r\n//         setLoadedMeetups(DUMMY_MEETUPS);\r\n//     }, []);\r\n//\r\n//     // return (\r\n//     //     <Layout>\r\n//     //         <MeetupList meetups={DUMMY_MEETUPS} />\r\n//     //     </Layout>\r\n//     // );\r\n//\r\n//     // return <MeetupList meetups={DUMMY_MEETUPS} />;\r\n//\r\n//     console.log(\"[ loaded ] ::: \", loaded);\r\n//\r\n//     return <MeetupList meetups={loaded} />;\r\n// }\r\n\r\nfunction HomePage(props) {\r\n    return (\r\n        <Fragment>\r\n            <Head>\r\n                <title>React Meetups</title>\r\n            </Head>\r\n            <MeetupList meetups={props.meetups} />;\r\n        </Fragment>\r\n    );\r\n}\r\n\r\n// Data fetching for static pages (SSG)\r\n// -----------------------------------------\r\n//  The code inside of getStaticProps is not expose to the client\r\n//\r\n// Note: for static page generation\r\n//    nextjs will search for a function with this name during rendering process\r\n//    build on the server\r\n//\r\n//\r\n// export async function getStaticProps() {\r\n//     // can use any instruction only run on the server\r\n//     // fetch data from an API\r\n//\r\n//     // need to return always a object\r\n//     return {\r\n//         props: {\r\n//             meetups: DUMMY_MEETUPS,\r\n//         },\r\n//     };\r\n// }\r\n//\r\n\r\nexport async function getStaticProps() {\r\n    // fetch data from API\r\n\r\n    // Note: the code will not expose to the client\r\n    const client = await MongoClient.connect(\r\n        \"mongodb+srv://practices:123ABCpractices@practices.socyj.mongodb.net/meetups?retryWrites=true&w=majority\"\r\n    );\r\n    const db = client.db();\r\n    const meetupsCollection = db.collection(\"meetups\");\r\n\r\n    const meetups = await meetupsCollection.find().toArray();\r\n\r\n    client.close();\r\n\r\n    // return {\r\n    //     props: {\r\n    //         meetups: DUMMY_MEETUPS,\r\n    //     },\r\n    //     // seconds that next will wait to regenerate the page\r\n    //     // on the server\r\n    //     revalidate: 10,\r\n    // };\r\n    return {\r\n        props: {\r\n            // we need to use map because mongodb use _id as an object, and throw and erro\r\n            meetups: meetups.map((meetup) => ({\r\n                title: meetup.title,\r\n                address: meetup.address,\r\n                image: meetup.image,\r\n                description: meetup.description,\r\n                id: meetup._id.toString(),\r\n            })),\r\n        },\r\n        revalidate: 1,\r\n    };\r\n}\r\n\r\n// Data fetching for server (SSR)\r\n// -----------------------------------------\r\n//\r\n// NOTE: not run during the build process\r\n// run on the server, never on the client\r\n// for any incoming request\r\n//\r\n// export async function getServerSideProps(context) {\r\n//     // to check cookie, authentication, etc\r\n//     const req = context.req;\r\n//     const res = context.res;\r\n\r\n//     // fetch data from an API or filesystem\r\n\r\n//     return {\r\n//         props: {\r\n//             meetups: DUMMY_MEETUPS,\r\n//         },\r\n//     };\r\n// }\r\n\r\nexport default HomePage;\r\n"]},"metadata":{},"sourceType":"module"}